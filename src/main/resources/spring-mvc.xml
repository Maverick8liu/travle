<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 扫描controller（controller层注入） -->
    <context:component-scan base-package="com.hg.hgc.web.controller"/>

    <!-- 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的 -->
    <!-- 指定自己定义的validator 
    <mvc:annotation-driven validator="validator"/>-->

    <!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>-->
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties 
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>-->
    

    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
                <value>classpath:messages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
    
    <!--  kisso 注入初始化，也支持使用 web.xml 初始化 -->
	<bean id="kissoInit" class="com.baomidou.kisso.web.WebKissoConfigurer" init-method="initKisso">
		<property name="ssoPropPath" value="sso.properties" />
		<!-- 测试模式 ，不同环境配置选择设置 -->
		<property name="runMode" value="test_mode" />
		<!-- 
		   此处可以注入 SSOConfig 配置属性，也可以定义自己的 kisso 插件，基础 SSOPlugin 抽象类。
		 <property name="pluginList">
		 	<list>
		 		<bean name="com.xxxx.MyPlugin">
		 	</list>
		 </property>
		 -->
	</bean>
	<!-- <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
    </mvc:interceptors> -->
	<mvc:interceptors>
		<!-- SSO 拦截器 -->
		<!-- path 对所有的请求拦截使用/**，对某个模块下的请求拦截使用：/myPath/* -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.baomidou.kisso.web.interceptor.SSOSpringInterceptor" />
		</mvc:interceptor>
		<!-- SSO 系统权限拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.baomidou.kisso.web.interceptor.SSOPermissionInterceptor">
				<property name="authorization">
					<bean class="com.hg.hgc.web.interceptors.SysAuthorization" />
				</property>
				<property name="illegalUrl" value="http://http://sso.test.com/travel/rest/404" />
			</bean>
		</mvc:interceptor>
		<!-- <mvc:interceptor>
			<mvc:mapping path="/test/**"/>
			<bean class="com.hg.hgc.web.interceptors.MyInterceptors">
			<property name="authorization">
					<bean class="com.hg.hgc.web.interceptors.SysAuthorization" />
				</property>
				<property name="illegalUrl" value="http://gxwtest.cn:8080/rest/rest/404" />
			</bean>
		</mvc:interceptor> -->
	</mvc:interceptors>
    

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="zh_CN"/>
    </bean>

    <!-- 支持返回json(避免IE在ajax请求时，返回json出现下载 ) -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 支持返回json -->

    <!-- 对模型视图添加前后缀 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/views/" p:suffix=".jsp"/>

    <!-- 配置springMVC处理上传文件的信息 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

	<!--  启用shrio授权注解拦截方式 
    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean> -->
<mvc:annotation-driven>
	</mvc:annotation-driven>
</beans>
